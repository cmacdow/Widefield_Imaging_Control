function [opts_vars, opts_vals] = BehavioralCameraConfiguration()

%Default Behavioral Camera Options

%Imaging Options
opts_vars(1) = struct('Name','record','Type','scalar','Values',[],'Label','Exposure','Editable',1); 
opts_vars(2) = struct('Name','num_cam','Type','scalar','Values',[],'Label','Framerate','Editable',0); 
opts_vars(3) = struct('Name','fps','Type','scalar','Values',[],'Label','Duration','Editable',1); 
opts_vars(1) = struct('Name','duration_in_sec','Type','scalar','Values',[],'Label','Exposure','Editable',1); 
opts_vars(2) = struct('Name','framerate','Type','scalar','Values',[],'Label','Framerate','Editable',0); 
opts_vars(3) = struct('Name','recording_duration','Type','scalar','Values',[],'Label','Duration','Editable',1); 

%Define default values 
opts_vals.record = 0; %1=record video, 0=check cameras
opts_vals.num_cam = 0; %Number of Cameras
opts_vals.fps = 60; %frame rate of behvaioral acq cameras
opts_vals.duration_in_sec = 10; %duration of the recording in second
opts_vals.w = 640; 
opts_vals.h = 480; 
opts_vals.show_feed = 'True'; %Show feed from camera 1 
opts_vals.time_stamp = 'True'; %Add timestamps to the recording file
opts_vals.filetype = '.avi';
opts_vals.flank_duration = 10; %duration in seconds that behavioral cameras will start and end before and after the imaging

end
